/*
 *
 *  Copyright UKQCD Collaboration, March 2007.
 *  Written by Peter Boyle.
 *  This software is provided for NON-COMMERCIAL use only,
 *  and may not be redistributed without permission.
 *  It is provided as is and is not guaranteed fit for any purpose.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include "processor.h"
extern struct processor *PROC;

#include "registers.h"

void dwf_dslash( char *);
void set_label_fmt(char *);
/*Options flags*/
int human = 0;
char name[80];
int dagger = 0;

int MIC_CACHE_MANAGEMENT=0;


void jump(int where);
void fill_l1t_l2t(int addr, int number,offset_array_2d immediates);
void fill_l1nt_l2t(int addr, int number,offset_array_2d immediates);
void fill_l1nt_l2nt(int addr, int number,offset_array_2d immediates);
void fill_l1nt(int addr, int number,offset_array_2d immediates);
void fill_l1t(int addr, int lo,int hi,offset_array_2d immediates);
void fill_l2t(int addr, int lo,int hi,offset_array_2d immediates);
void fill_l1t(int addr, int number,offset_array_2d immediates);
void evict_from_l1(int addr, int number,offset_array_2d immediates);
void evict_from_l2(int addr, int number,offset_array_2d immediates);
int skip=0;
void fill_l1nt_l2t(int addr, int number,offset_array_2d immediates)
{
  for(int i=0;i<number;i++){
    make_inst(CACHPIPE, PREF1, immediates[i+skip][0],addr);
  }
  for(int i=0;i<number;i++){
    make_inst(CACHPIPE, PREF0NT, immediates[i][0],addr);
  }
}
void fill_l1t_l2t(int addr, int number,offset_array_2d immediates)
{
  for(int i=0;i<number;i++){
    make_inst(CACHPIPE, PREF1, immediates[i+skip][0],addr);
  }
  for(int i=0;i<number;i++){
    make_inst(CACHPIPE, PREF0, immediates[i][0],addr);
  }
}
void fill_l1nt_l2nt(int addr, int number,offset_array_2d immediates)
{
  for(int i=0;i<number;i++){
    make_inst(CACHPIPE, PREF1NT, immediates[i+skip][0],addr);
  }
  for(int i=0;i<number;i++){
    make_inst(CACHPIPE, PREF0NT, immediates[i][0],addr);
  }
}
void fill_l1nt(int addr, int number,offset_array_2d immediates)
{
  for(int i=0;i<number;i++){
    make_inst(CACHPIPE, PREF0NT, immediates[i][0],addr);
  }
}
void fill_l1t(int addr,int hi,offset_array_2d immediates)
{
  fill_l1t(addr,0,hi,immediates);
}
void fill_l1t(int addr,int lo,int hi,offset_array_2d immediates)
{
  for(int i=lo;i<hi;i++){
    make_inst(CACHPIPE, PREF0, immediates[i][0],addr);
  }
}
void fill_l2t(int addr,int lo,int hi,offset_array_2d immediates)
{
  for(int i=lo;i<hi;i++){
    make_inst(CACHPIPE, PREF1, immediates[i][0],addr);
  }
}
void evict_from_l1(int addr, int number,offset_array_2d immediates)
{
  for(int i=0;i<number;i++){
    make_inst(CACHPIPE, FLUSH, immediates[i][0],addr);
  }
}
void evict_from_l2(int addr, int number,offset_array_2d immediates)
{
  for(int i=0;i<number;i++){
    make_inst(CACHPIPE, FLUSHL2, immediates[i][0],addr);
  }
}


void jump(int where)
{
  make_inst(BRCHPIPE,BRANCH,where); 
}



Datum ConstantType=Double;
Datum FourSpinType=Double;
Datum TableType=ShortInteger;
Datum GaugeType=Double;
int addto = 0;
int scaleoutput = 0;
int sgny=0;
char procname[80]="UNSPECIFIED";

bool do_interior=true;
bool do_exterior=true;
bool do_dperp   =false;
bool do_axpy    =true;
bool do_addto   =true;
bool do_norm    =false;
bool do_scale    =false;

int main ( int argc, char *argv[])
{
  struct processor *myproc;
  int arg;
  char *c;

  name[0] = '\0';
  /*Process command line*/
  while ( ( arg = getopt(argc,argv,"ahRn:P:dskfiloerpx")) != EOF){
    switch(arg){
    case 'R': human = 1; break;
    case 'n': if (strlen(optarg)<30) strcpy(name,optarg); break;
    case 'P': if (strlen(optarg)<30) strcpy(procname,optarg); break;
    case 'd': dagger = 1; break;
    case 'y': sgny = 1; break;
    case 'a': addto = 1; break;
    case 'k': do_scale=1;break;
    case 'i': do_interior=1;do_exterior=0;break;
    case 'e': do_exterior=1;do_interior=0;break;
    case 'o': scaleoutput = 1; break;
    case 'l': MIC_CACHE_MANAGEMENT=1; break;
    case 'p': do_dperp=1;break;
    case 'r': do_norm=1;break;
    case 'x': do_axpy=1;break;
    case 's': FourSpinType=Single; GaugeType=Single;  break;
    default: fprintf(stderr,"Usage: %s -[Rd] -n routine_name\n",argv[0]); 
             fprintf(stderr,"\tR -> human readable .S format \n"); 
             fprintf(stderr,"\td -> dagger decompose\n"); 
             exit (1); break;
    }
  }

  if ( do_interior ) { 
    printf("/*Interior links*/\n");
  }
  if ( do_exterior ) { 
    printf("/*Exterior links*/\n");
  }
  if ( addto ) { 
    printf("/*Add to result field*/\n");
  }
  if ( do_dperp ) { 
    printf("/*5d hopping term*/\n");
  }

  /*Control output according to user set up args*/
  streams_reg_alloc(0);
  set_processor_optarg(procname);
  set_human_readable(human);
  setup_cmadds();

  /*Write the naive asm code*/
  dwf_dslash(name);

  /*Filter through an virtual out of order processor */
  schedule_for_proc();

  /*Dump the resulting code*/
  dump_instruction_queue();

  return(0);
}

void complex_six_cmaddtos(
		       int h1, int e1,int a1,int c1,
                       int h2, int e2,int a2,int c2,
                       int h3, int e3,int a3,int c3,
		       int h4, int e4,int a4,int c4,
                       int h5, int e5,int a5,int c5,
                       int h6, int e6,int a6,int c6);

void dwf_dslash( char *name)
{
  /*
   * This marks the argument registers as defined by ABI as off limits
   * to us until they are freed by "getarg()";
   */
  int dum = defargcount(1);
  int retno;

  /*------------------------------------------------------------------
   * registers used 
   *------------------------------------------------------------------
   */
  reg_array_2d(Psi,Cregs,4,3);  /* Accumulated 4-spinor - 12 regs*/
  reg_array_2d(Chi ,Cregs,2,3); // 2 spinor      - 6 regs 
  reg_array_2d(UChi,Cregs,2,3); // 2 spinors     - 6 regs
  reg_array_1d(tmp,Cregs,4); 

  int creg = tmp[3];
  int nreg = tmp[0];
  int U[3][3] = {
    {tmp[0],tmp[1],tmp[2]}, 
    {tmp[0],tmp[1],tmp[2]}, 
    {tmp[0],tmp[1],tmp[2]}
  };

  int Chimu[4][3] = {
    {Chi[0][0],Chi[0][1],Chi[0][2]},
    {Chi[1][0],Chi[1][1],Chi[1][2]},
    {UChi[0][0],UChi[0][1],UChi[0][2]},
    {UChi[1][0],UChi[1][1],UChi[1][2]}
  };

  offset_3d(CHIIMM,FourSpinType,2,3,2*nsimd());
  offset_3d(PSIIMM,FourSpinType,4,3,2*nsimd());
  offset_3d(PSIIMMH,Half,4,3,2*nsimd());

  offset_2d(CACHE_MANAGEMENT_PSI,FourSpinType,48,2*nsimd());
  offset_2d(CACHE_MANAGEMENT_G,GaugeType,18,2*nsimd());

  int t;

  /*
   * Integer registers -- 12 regs
   */
  // Following are persistent state across s-loop iterations
  alreg(U_p,Iregs);    /*Pointer to the current cpt of gauge field    */
  alreg(Chi_p,Iregs);  /*Pointer to the input four spinor             */
  alreg(tab,Iregs);     /*Pointer to current entry in offset table*/
  alreg(Complex_i,Iregs);  /*Point to (0,1)x Nsimd*/
  alreg(Ls,Iregs);        
  alreg(s,Iregs);        
  alreg(recbuf_base,Iregs);
  alreg(mask,Iregs);
  alreg(s_offset,Iregs);  // Compute as multiple of s ?

  // Temporaries
  // Have to spill length, outptr to stack. As these are outside direction
  // loop the overhead is still strongly suppressed.
  alreg(temp1,Iregs);
  alreg(temp2,Iregs);
  alreg(temp3,Iregs);
  alreg(temp4,Iregs);
  alreg(temp5,Iregs);
  int length = temp3;
  //  int Psi_p  = temp4;
  int outptr = temp5;

  // Alias args to mask
  int args = mask;

  /*Useful integer immediate constants, in units of Fsize*/
  def_off( ZERO_IMM,Byte,0);
  def_off( minusone,Byte,-1);
  def_off( one,Byte,1);
  def_off( eight,Byte,8);
  def_off( m64,Byte,-64);
  def_off( GAUGE_SITE_IMM, FourSpinType,8*18*nsimd());
  def_off( PSI_IMM  , FourSpinType,24*nsimd());
  def_off( CHI_IMM, FourSpinType,12*nsimd());
  def_off( MAT_IMM, GaugeType,18*nsimd());
  offset_3d(GIMM    , GaugeType, 3, 3 ,2*nsimd() );
  offset_1d(TAB_IMM,TableType,17);
  offset_1d(SPILL_IMM,Integer,64);

  const int SpillTabBase=4;
  const int SpillUpBase=5;
  const int SpillPsipBase=6;
  const int SpillOutBase=6;
  const int SpillLength=8;
  const int SpillPsiP  =9;
  const int SpillOutptr=10;
  const int SpillMask  =11;
  const int SpillSitePerm=12;
  
  const int SpillChimuBegin=16;
  const int SpillChimuMultBegin=24;
  const int SpillChimuMaskBegin=32;
  
  //  int cmplx_i_offset    = CONSTIMM[0][0];// i
  //  int cmplx_mi_offset   = CONSTIMM[1][0];// -i
  def_off(zero_offset,ConstantType,2*nsimd()*2);
  def_off(two_offset ,ConstantType,3*nsimd()*2);
  def_off(negtwomass_offset,ConstantType,4*nsimd()*2);
  def_off(A_offset         ,ConstantType,5*nsimd()*2);
  def_off(B_offset         ,ConstantType,6*nsimd()*2);
  def_off(norm_offset      ,ConstantType,7*nsimd()*2);

  // Mask bits for predicating directions
  def_off( mask_0,Byte,1);
  def_off( mask_1,Byte,2);
  def_off( mask_2,Byte,4);
  def_off( mask_3,Byte,8);
  def_off( mask_4,Byte,16);
  def_off( mask_5,Byte,32);
  def_off( mask_6,Byte,64);
  def_off( mask_7,Byte,128);
  int mask_imm[8] = { 
    mask_0,
    mask_1,
    mask_2,
    mask_3,
    mask_4,
    mask_5,
    mask_6,
    mask_7
  };

  // Integer sizes
  int Isize      = def_offset(PROC->I_size,Byte,"Isize");
  int ISsize     = def_offset(PROC->IS_size,Byte,"ISsize");

  def_off(bits16,Byte,0xFFFF);
  def_off(thirtytwo,Byte,32);
  def_off(sixteen,Byte,16);


  int i,j,co,sp;

  /*********************************************************************/

  pragma(DCBT_SPACE,4);
  pragma(LOAD_LIM,100);
  pragma(LOAD_SPACE,0);
  make_inst(DIRECTIVE,Enter_Routine,name);

  int hbias = grab_stack(512); // bytes on stack frame
  save_regs();
  queue_iadd_imm(PROC->StackPointer,PROC->StackPointer,hbias);

  /*********************************************
   * our arguments 
   *********************************************
   */
  getarg(args); /*Pointer to arg list*/
  alreg(sitepermutation,Iregs);

  //  queue_iload(Psi_p, ZERO_IMM,args);   
                                       queue_load_addr(args,Isize,args);   //0
  queue_iload(Chi_p, ZERO_IMM,args);   queue_load_addr(args,Isize,args);   //1
  queue_iload(U_p,   ZERO_IMM,args);   queue_load_addr(args,Isize,args);   //2
  queue_iload(length,ZERO_IMM,args);   queue_load_addr(args,Isize,args);   //3
  queue_iload(Ls,    ZERO_IMM,args);   queue_load_addr(args,Isize,args);   //4
  queue_iload(tab,   ZERO_IMM,args);   queue_load_addr(args,Isize,args);   //5
  queue_iload(Complex_i,ZERO_IMM,args);queue_load_addr(args,Isize,args);   //6
  queue_iload(sitepermutation,ZERO_IMM,args);	queue_load_addr(args,Isize,args); //7  
  queue_iload(recbuf_base,ZERO_IMM,args);	queue_load_addr(args,Isize,args); //8  
  queue_iload(outptr,ZERO_IMM,args);                                              //9

  // Spill base pointers to stack
  queue_istore(tab,  SPILL_IMM[SpillTabBase] ,PROC->StackPointer);
  queue_istore(U_p,  SPILL_IMM[SpillUpBase]  ,PROC->StackPointer);
  //  queue_istore(Psi_p,SPILL_IMM[SpillPsipBase],PROC->StackPointer);
  queue_istore(outptr,SPILL_IMM[SpillOutBase] ,PROC->StackPointer);
  queue_istore(sitepermutation,SPILL_IMM[SpillSitePerm],PROC->StackPointer);

  //  queue_istore(Psi_p, SPILL_IMM[SpillPsiP]   ,PROC->StackPointer);
  queue_istore(outptr,SPILL_IMM[SpillOutptr] ,PROC->StackPointer);

  /**************************************************
   * Load common constants into Iregs
   **************************************************
   */

  for (int i =0; i<12; i++ ) { 
    need_constant(i*2*SizeofDatum(FourSpinType)*nsimd());
  }
  for (int i =0; i<9; i++ ) { 
    need_constant(i*2*SizeofDatum(GaugeType)*nsimd());
  }
  complex_constants_prepare(creg,Complex_i);

  complex_load(nreg,zero_offset,Complex_i,ConstantType); // Zero the norm reg

  /**********************************
   * Site loop 
   **********************************
   */
  retno = get_target_label(); 
  check_iterations(length,retno); 

  int branchsite = start_loop(length);
  queue_istore(length,SPILL_IMM[SpillLength],PROC->StackPointer);

  ////////////////////////////////////////////////////////////////
  // For cache friendly, must use permuted site to derference:
  // outptr
  // tab
  // U_p
  ////////////////////////////////////////////////////////////////
  queue_iload(temp1,SPILL_IMM[SpillSitePerm],PROC->StackPointer);
  queue_iload_short(sitepermutation,ZERO_IMM,temp1);        // Load permuted site

  queue_iadd_imm(temp1,temp1,TAB_IMM[1]);                   // advance table
  queue_istore(temp1,SPILL_IMM[SpillSitePerm],PROC->StackPointer); 

  
  queue_iload   (U_p,SPILL_IMM[SpillUpBase],PROC->StackPointer); // Base pointer
  queue_imul_imm(temp1,sitepermutation,MAT_IMM); // 8 * 18 * nsimd * site
  queue_imul_imm(temp1,temp1,eight);
  queue_iadd    (U_p,temp1,U_p);

  queue_iload   (tab  ,SPILL_IMM[SpillTabBase],PROC->StackPointer);        
  queue_imul_imm(temp1,sitepermutation,TAB_IMM[16]);
  queue_iadd    (tab  ,temp1, tab);

  queue_imul_imm(temp1,sitepermutation,PSI_IMM);
  queue_imul    (temp1,temp1,Ls);

  //  queue_iload   (Psi_p,SPILL_IMM[SpillPsipBase],PROC->StackPointer);
  //  queue_iadd    (Psi_p,temp1,Psi_p);
  //  queue_istore  (Psi_p,SPILL_IMM[SpillPsiP],PROC->StackPointer);

  queue_iload   (outptr,SPILL_IMM[SpillOutBase],PROC->StackPointer);
  queue_iadd    (outptr,temp1,outptr);
  queue_istore  (outptr,SPILL_IMM[SpillOutptr],PROC->StackPointer);

  // Need a branch free way to force lower components to zero for off node.
  // Load/splat a register with either 0xFFFF FFFF FFFF FFFF or with 0x0 and
  // "anding" the zmm's on the lower compontents?
  const int compute_pointers =1;
  if (compute_pointers)
  {
    // Scope the temporary regs so they disappear out of scope
    int zero_reg= temp1;
    int baseaddr= temp5;
    int control = temp3;
    int offset  = temp2; // live only during direction loop
    queue_iload_imm(zero_reg,ZERO_IMM);
    queue_iload_short(mask,TAB_IMM[10],tab); 
    for ( int mu=0;mu<4;mu++ ) {
      for ( int pmdir=0;pmdir<2;pmdir++ ) {
	int dir = pmdir+mu*2;

	//////////////////////////////////////
	// base address computation for this dir
	// if off boundary, we swizzle which base address,
	// add this to the integer offset, 
	///////////////////////////////////////
	queue_iand_imm(control,mask,mask_imm[dir]); 
	queue_iload_short(offset,TAB_IMM[dir],tab);  
	queue_mov(Chi_p,baseaddr);

	queue_cmovgt(control,recbuf_base,baseaddr); 
	queue_iadd(baseaddr,offset,baseaddr);
	queue_istore(baseaddr,SPILL_IMM[SpillChimuBegin+dir],PROC->StackPointer);

	// mask for lower components either 0xFFFF FFFF or 0x0.
	queue_iload_imm(temp4,minusone);
	queue_cmovgt(control,zero_reg,temp4);
	queue_istore(temp4,SPILL_IMM[SpillChimuMaskBegin+dir],PROC->StackPointer);

	// Multiply s by this number; either 6 or 12 * sizeof(vComplex)
	// depending on receive buf (half spinor) or interior (full spinor).
	queue_iload_imm(temp4,CHI_IMM); // Chi
	queue_iadd(temp5,temp4,temp4);  // 2Chi
	queue_cmovgt(control,temp4,temp5);// Either Chi or 2Chi		   
	queue_istore(temp5,SPILL_IMM[SpillChimuMultBegin+dir],PROC->StackPointer);

      }
    }
  }	

  if ( 1)
  {
    int  U_p_s = temp1;
    queue_iadd_imm(U_p_s,U_p,ZERO_IMM);
    for(int dir=0;dir<8;dir++){
      fill_l1t(U_p_s,9,CACHE_MANAGEMENT_PSI); // no G-field reuse
      queue_load_addr(U_p_s,MAT_IMM,U_p_s); 
    }
  }
  /**********************************
   *  s-loop
   **********************************
   */
  queue_iadd_imm (s,Ls,ZERO_IMM);
  int branchls   = start_loop(s); 

  /////////////////////////////////////////////////////////
  // Unrolled loop over directions
  /////////////////////////////////////////////////////////

  { 
    int U_p_s = temp1;
    int Chi_mu =temp2; // live only during direction loop
    int temp   =temp3;

    for ( int pmdir=0;pmdir<2;pmdir++ ) {
      for ( int mu=0;mu<4;mu++ ) {
	
	/* spinor pointer  */
	int pm;
	if ( dagger ) pm = 1-pmdir;
	else          pm = pmdir;
	
	int dir = pmdir+mu*2;
	
	if(compute_pointers){
	  queue_iload(Chi_mu,SPILL_IMM[SpillChimuBegin+dir],PROC->StackPointer);   // Base
	  queue_iload(temp5,SPILL_IMM[SpillChimuMultBegin+dir],PROC->StackPointer);// Mult
	  queue_isub(temp4,Ls,s); 
	  queue_imul(temp5,temp4,temp5);
	  queue_iadd(Chi_mu,temp5,Chi_mu);                                         // Base+s*Mult

	    // x- : assume in cache.
	    // x+ : touch temporal
	  if ( mu!=0 ) fill_l1nt (Chi_mu,12,CACHE_MANAGEMENT_PSI); 
	  else if ( pm ) fill_l1nt(Chi_mu,12,CACHE_MANAGEMENT_PSI); 

	  /*
	    if(pmdir && (mu<2)) fill_l1t (Chi_mu,24,CACHE_MANAGEMENT_PSI); 
	    else                fill_l1t(Chi_mu,24,CACHE_MANAGEMENT_PSI); 
	  */

	} else {
	  // can save two ops here by carrying s-offset
	  if(dir==0){
	    queue_isub(temp5,Ls,s);              //this 
	    queue_imul_imm(temp5,temp5,PSI_IMM); //and this
	    queue_iadd(temp5,temp5,Chi_p);
	  }

	  queue_iload_short(temp4,TAB_IMM[dir],tab);  
	  queue_iadd(Chi_mu,temp4,temp5);

	}




	make_inst(IALUPIPE,IOR,Chi_mu,Chi_mu,Chi_mu); /*
						       *Artificial noop with dependency to block loads to take place 
						       * after prefetches
						       */
	queue_iadd_imm(s_offset,Chi_mu,ZERO_IMM);// Copy into s_offset to allow prefetching to take place

	for(int s=0;s<2;s++){
	for(int c=0;c<3;c++){
	  complex_load(Chi[s][c],PSIIMM[s][c][0],s_offset,FourSpinType);
	}}
	for(int s=2;s<4;s++){
	for(int c=0;c<3;c++){
	  // Here must zero if off-node
	  // Ideally have a flag that if peri-wrap also does a permute.
	  // That permute can be be a data value control word to avoid branches.
	  // Do not know how to get the equivalent of the "vpandd" conditional zero
	  // of a register on BG/Q
	  complex_load(Chimu[s][c],PSIIMM[s][c][0],s_offset,FourSpinType);
	  if(compute_pointers){
	    make_inst(SIMDMICPIPE,MIC_AND_MEMOP,Chimu[s][c],Chimu[s][c],SPILL_IMM[SpillChimuMaskBegin+dir],PROC->StackPointer);
	  }
	}}

     ////////////////////////////////////////////////////////
     // Project
     ////////////////////////////////////////////////////////

	  /****************************************************************
	   * Spin project 4 spinor                                        *
	   ****************************************************************/
	  if ( mu == 0 ) {
	    /* Gx
	     *  0 0  0  i    [0]+-i[3]
	     *  0 0  i  0    [1]+-i[2]
	     *  0 -i 0  0
	     * -i 0  0  0
	     */
	    if ( pm ==0 ) {
	      for(co=0;co<3;co++) complex_ApiB(Chi[0][co],Chimu[0][co],Chimu[3][co]);
	      for(co=0;co<3;co++) complex_ApiB(Chi[1][co],Chimu[1][co],Chimu[2][co]);
	    } else {
	      for(co=0;co<3;co++) complex_AmiB(Chi[0][co],Chimu[0][co],Chimu[3][co]);
	      for(co=0;co<3;co++) complex_AmiB(Chi[1][co],Chimu[1][co],Chimu[2][co]);
	    }
	  } else if ( mu == 1 ) {
	    int pmy = pm;
	    if ( sgny ) pmy=1-pm;
	    /*Gy
	     *  0 0  0  -1  [0] -+ [3]
	     *  0 0  1  0   [1] +- [2]
	     *  0 1  0  0
	     * -1 0  0  0
	     */
	    if ( pmy ==0 ) {
	      for(co=0;co<3;co++) complex_sub(Chi[0][co],Chimu[0][co],Chimu[3][co]);
	      for(co=0;co<3;co++) complex_add(Chi[1][co],Chimu[1][co],Chimu[2][co]);
	    } else {
	      for(co=0;co<3;co++) complex_add(Chi[0][co],Chimu[0][co],Chimu[3][co]);
	      for(co=0;co<3;co++) complex_sub(Chi[1][co],Chimu[1][co],Chimu[2][co]);
	    }
	  } else if ( mu == 2 ) {
	    /*Gz
	     *  0 0  i  0   [0]+-i[2]
	     *  0 0  0 -i   [1]-+i[3]
	     * -i 0  0  0
	     *  0 i  0  0
	     */
	    if ( pm ==0 ) {
	      for(co=0;co<3;co++) complex_ApiB(Chi[0][co],Chimu[0][co],Chimu[2][co]);
	      for(co=0;co<3;co++) complex_AmiB(Chi[1][co],Chimu[1][co],Chimu[3][co]);
	    } else {
	      for(co=0;co<3;co++) complex_AmiB(Chi[0][co],Chimu[0][co],Chimu[2][co]);
	      for(co=0;co<3;co++) complex_ApiB(Chi[1][co],Chimu[1][co],Chimu[3][co]);
	    }
	  } else if ( mu == 3 ) {
	    /*Gt
	     *  0 0  1  0 [0]+-[2]
	     *  0 0  0  1 [1]+-[3]
	     *  1 0  0  0
	     *  0 1  0  0
	     */
	    if ( pm ==0 ) {
	      for(co=0;co<3;co++) complex_add(Chi[0][co],Chimu[0][co],Chimu[2][co]);
	      for(co=0;co<3;co++) complex_add(Chi[1][co],Chimu[1][co],Chimu[3][co]);
	    } else {
	      for(co=0;co<3;co++) complex_sub(Chi[0][co],Chimu[0][co],Chimu[2][co]); 
	      for(co=0;co<3;co++) complex_sub(Chi[1][co],Chimu[1][co],Chimu[3][co]);
	    }
	  }
	
	/************************************************************
	 * SU3 multiply.
	 ************************************************************
	 */

	if ( (mu==0) && (pmdir==0) ) queue_iadd_imm(U_p_s,U_p,ZERO_IMM);

	for(int j=0;j<3;j++){

	  complex_load(U[j][0],GIMM[j][0][0],U_p_s,GaugeType);
	  complex_load(U[j][1],GIMM[j][1][0],U_p_s,GaugeType);
	  complex_load(U[j][2],GIMM[j][2][0],U_p_s,GaugeType);

	  complex_twospin_color_dot(U[j][0],U[j][1],U[j][2],
				    Chi[0][0],Chi[0][1],Chi[0][2],
				    Chi[1][0],Chi[1][1],Chi[1][2],
				    UChi[0][j],UChi[1][j]);
	}

	/*****************************************************************
	 * Reconstruct / accumulate into Psi
	 *****************************************************************
	 */
	
	{
	  int pmy=pm;
	  if (sgny) pmy=1-pm;
	  
	  /*Upper two components are simple, by virtue of our choice of projection*/      
	  if ( (mu==0) && (pmdir==0) ){
	    for(co=0;co<3;co++) make_inst(SIMDMICPIPE,MIC_MOV,Psi[0][co],UChi[0][co]);
	    for(co=0;co<3;co++) make_inst(SIMDMICPIPE,MIC_MOV,Psi[1][co],UChi[1][co]);
	    for(co=0;co<3;co++) make_inst(SIMDMICPIPE,MIC_XOR,Psi[2][co],Psi[2][co],Psi[2][co]); // Zero the norm reg
	    for(co=0;co<3;co++) make_inst(SIMDMICPIPE,MIC_XOR,Psi[3][co],Psi[3][co],Psi[3][co]); // Zero the norm reg
	  } else { 
	    for(co=0;co<3;co++) complex_add(Psi[0][co],Psi[0][co],UChi[0][co]);
	    for(co=0;co<3;co++) complex_add(Psi[1][co],Psi[1][co],UChi[1][co]);
	  }
	  
	  /*Lower two components are complex, by virtue of our choice of projection*/      
	  if ( (mu==0) && (pm==0) ) for(co=0;co<3;co++) complex_AmiB(Psi[2][co],Psi[2][co],UChi[1][co]);
	  if ( (mu==0) && (pm==1) ) for(co=0;co<3;co++) complex_ApiB(Psi[2][co],Psi[2][co],UChi[1][co]);
	  if ( (mu==1) && (pmy==0) )for(co=0;co<3;co++) complex_add (Psi[2][co],Psi[2][co],UChi[1][co]);
	  if ( (mu==1) && (pmy==1) )for(co=0;co<3;co++) complex_sub (Psi[2][co],Psi[2][co],UChi[1][co]);
	  if ( (mu==2) && (pm==0) ) for(co=0;co<3;co++) complex_AmiB(Psi[2][co],Psi[2][co],UChi[0][co]);
	  if ( (mu==2) && (pm==1) ) for(co=0;co<3;co++) complex_ApiB(Psi[2][co],Psi[2][co],UChi[0][co]);
	  if ( (mu==3) && (pm==0) ) for(co=0;co<3;co++) complex_add (Psi[2][co],Psi[2][co],UChi[0][co]);
	  if ( (mu==3) && (pm==1) ) for(co=0;co<3;co++) complex_sub (Psi[2][co],Psi[2][co],UChi[0][co]);
	  
	  if ( (mu==0) && (pm==0) ) for(co=0;co<3;co++) complex_AmiB(Psi[3][co],Psi[3][co],UChi[0][co]);
	  if ( (mu==0) && (pm==1) ) for(co=0;co<3;co++) complex_ApiB(Psi[3][co],Psi[3][co],UChi[0][co]);
	  if ( (mu==1) && (pmy==0) )for(co=0;co<3;co++) complex_sub (Psi[3][co],Psi[3][co],UChi[0][co]);
	  if ( (mu==1) && (pmy==1) )for(co=0;co<3;co++) complex_add (Psi[3][co],Psi[3][co],UChi[0][co]);
	  if ( (mu==2) && (pm==0) ) for(co=0;co<3;co++) complex_ApiB(Psi[3][co],Psi[3][co],UChi[1][co]);
	  if ( (mu==2) && (pm==1) ) for(co=0;co<3;co++) complex_AmiB(Psi[3][co],Psi[3][co],UChi[1][co]);
	  if ( (mu==3) && (pm==0) ) for(co=0;co<3;co++) complex_add (Psi[3][co],Psi[3][co],UChi[1][co]);
	  if ( (mu==3) && (pm==1) ) for(co=0;co<3;co++) complex_sub (Psi[3][co],Psi[3][co],UChi[1][co]);
	}
	queue_load_addr(U_p_s,MAT_IMM,U_p_s); 
	
      }      /*END MU/PM loops*/
    }

  }

  { 
    // Temporary allocation for epilogue fo loop
    int ptr    =temp3; // live only after direction loop

    if(scaleoutput==1) {
      int B = U[2][1];
      queue_iadd_imm(ptr,Complex_i,B_offset);
      complex_load(B,ZERO_IMM,ptr,ConstantType);
      for(sp=0;sp<4;sp++){
	for(co=0;co<3;co++){
	  simd_mul(Psi[sp][co],B,Psi[sp][co]);
	}
      }
    }
    /* Store result Psi & Pointer update*/    
    queue_iload(outptr,SPILL_IMM[SpillOutptr],PROC->StackPointer);
    //    queue_iload(Psi_p,SPILL_IMM[SpillPsiP],PROC->StackPointer);

    for(sp=0;sp<4;sp++){
      for(co=0;co<3;co++){
	//	simd_madd(nreg,Psi[sp][co],Psi[sp][co],nreg);
	complex_store(Psi[sp][co],PSIIMM[sp][co][0],outptr,FourSpinType);
      }
    }
    //    evict_from_l2(outptr,24,CACHE_MANAGEMENT_PSI);

    //    queue_iadd_imm(Psi_p,Psi_p,PSI_IMM);
    //    queue_istore(Psi_p,SPILL_IMM[SpillPsiP],PROC->StackPointer);
    queue_iadd_imm(outptr,outptr,PSI_IMM);
    queue_istore(outptr,SPILL_IMM[SpillOutptr],PROC->StackPointer);


    queue_iadd_imm(ptr,Complex_i,norm_offset);
    //    complex_store(nreg,ZERO_IMM,ptr,ConstantType);
  }


  stop_loop(branchls,s); 

  //queue_iadd_imm(U_p,U_p,GAUGE_SITE_IMM);
  //queue_load_addr(tab,TAB_IMM[16],tab);

  queue_iload(length,SPILL_IMM[SpillLength],PROC->StackPointer);
  stop_loop(branchsite,length);
  make_inst(DIRECTIVE,Target,retno);

                  /*
		   *
		   * EPILOGUE
		   *
		   */

  queue_isub_imm(PROC->StackPointer,PROC->StackPointer,hbias);
  restore_regs();
  free_stack();
  make_inst(DIRECTIVE,Exit_Routine,name);

  return;
}



